<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Join Virtual Class</title>
    <link rel="stylesheet" href="/css/styles.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container">
        <div class="d-flex  justify-content-between align-items-center">
            <h1 id="pageName">Join Virtual Class</h1>
     
            <button type="button" class="btn btn-secondary " style="margin-left:1.5rem;">
                <a href="/student/student-dashboard" class="text-light" style="text-decoration:none;">Back To Dashboard</a>
            </button>
            <button id="startRecording" class="btn btn-primary  flex-end ">Start Recording</button> 
            <button id="stopRecording" class="btn btn-danger " style="display: none;">Stop Recording</button>
            <video id="recordedVideo" controls style="display:none; margin-top: 20px;"></video>
            <button id="downloadRecording" class="btn btn-success " style="display:none;">Download Recording</button>
        </div>
        <div id="root"></div>
    </div>

    <script src="https://unpkg.com/@zegocloud/zego-uikit-prebuilt/zego-uikit-prebuilt.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', ()=>{
            const currentURL = window.location.href; // This gets the current full URL
            console.log('Current URL:', currentURL);

        // Extract the last part of the URL (identifier, e.g., _1726686365213)
        const urlIdentifier = currentURL.split('/').pop(); // This gets the last part of the URL
console.log(urlIdentifier)
// Send an API request to the backend with the extracted identifier
fetch('/api/match-virtual-class', {
    method: 'POST',
    headers: {
        'Content-Type': 'application/json'
    },
    body: JSON.stringify({ urlIdentifier })
})
.then(response => response.json())
.then(data => {
    if (data.success) {
        console.log('Match found!', data);
        // You can display the course, start time, etc. on the front end here
    } else {
        console.log('No match found.');
    }
})
.catch(error => {
    console.error('Error:', error);
});

        })
        const roomID = "<%= roomID %>";
        const userID = Math.floor(Math.random() * 10000) + "";
        const userName = "<%= user.fullName %>";
        //const appID = 88769033;
       // const serverSecret = "cc618635e7e918d355783ea252f70de4";
       const appID = 694325144;
       const serverSecret = "bdb7af8b34017d19aa361840f02f5c8a";

        const kitToken = ZegoUIKitPrebuilt.generateKitTokenForTest(
            appID,
            serverSecret,
            roomID,
            userID,
            userName
        );

        const zp = ZegoUIKitPrebuilt.create(kitToken);
        zp.joinRoom({
            container: document.querySelector("#root"),
            scenario: {
                mode: ZegoUIKitPrebuilt.GroupCall
            },
        });

        const startRecordingButton = document.getElementById('startRecording');
        const stopRecordingButton = document.getElementById('stopRecording');
        const recordedVideo = document.getElementById('recordedVideo');
        const downloadRecordingButton = document.getElementById('downloadRecording');

        let mediaRecorder;
        let recordedChunks = [];

        startRecordingButton.onclick = async () => {
            startRecordingButton.style.display = 'none';
            stopRecordingButton.style.display = 'block';

            // Get the screen stream
            const screenStream = await navigator.mediaDevices.getDisplayMedia({ video: true });

            // Get the audio stream from the microphone
            const devices = await navigator.mediaDevices.enumerateDevices();
            const audioInputDevices = devices.filter(device => device.kind === 'audioinput');

            const audioDeviceId = await selectAudioInputDevice(audioInputDevices);

            const audioStream = await navigator.mediaDevices.getUserMedia({
                audio: { deviceId: audioDeviceId ? { exact: audioDeviceId } : undefined }
            });

            // Combine the screen and audio streams
            const combinedStream = new MediaStream([
                ...screenStream.getVideoTracks(),
                ...audioStream.getAudioTracks()
            ]);

            mediaRecorder = new MediaRecorder(combinedStream);

            mediaRecorder.ondataavailable = event => {
                if (event.data.size > 0) {
                    recordedChunks.push(event.data);
                }
            };

            mediaRecorder.onstop = () => {
                const blob = new Blob(recordedChunks, { type: 'video/webm' });
                const url = URL.createObjectURL(blob);

                recordedVideo.src = url;
                recordedVideo.style.display = 'none';
                downloadRecordingButton.style.display = 'block';

                // Create a download link
                downloadRecordingButton.onclick = () => {
                    const downloadLink = document.createElement('a');
                    downloadLink.href = url;
                    downloadLink.download = 'recording.webm';
                    downloadLink.click();
                    downloadRecordingButton.style.display = 'none';
                };

                // Optionally, upload the recorded video to the server
                const formData = new FormData();
                formData.append('video', blob);

                fetch('/api/upload-recording', {
                    method: 'POST',
                    body: formData
                })
                    .then(response => response.json())
                    .then(data => {
                        console.log('Recording uploaded successfully', data);
                    })
                    .catch(error => {
                        console.error('Error uploading recording', error);
                    });
            };

            mediaRecorder.start();
        };

        stopRecordingButton.onclick = () => {
            startRecordingButton.style.display = 'block';
            stopRecordingButton.style.display = 'none';
            mediaRecorder.stop();
        };

        async function selectAudioInputDevice(audioInputDevices) {
            const audioDeviceId = audioInputDevices.length ? audioInputDevices[0].deviceId : null;
            // You can implement a custom selection UI if needed
            return audioDeviceId;
        }
    </script>
</body>
</html>
