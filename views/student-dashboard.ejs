<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Student Dashboard - University of Calabar</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css">
    <style>
        .timetable th,
        .timetable td {
            text-align: center;
            vertical-align: middle;
        }

        .course-cell {
            background-color: #e9ecef;
            border: 1px solid #dee2e6;
            padding: 5px;
            margin: 2px 0;
        }

        #examView {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: white;
            z-index: 1000;
            overflow-y: auto;
            display: none;
        }

        #timerDisplay {
            position: fixed;
            top: 10px;
            right: 10px;
            font-size: 24px;
            font-weight: bold;
            z-index: 1001;
        }

        .timetable-table {
            width: 100%;
            border-collapse: collapse;
        }

        .timetable-table th,
        .timetable-table td {
            border: 1px solid #dee2e6;
            padding: 8px;
            text-align: center;
        }

        .timetable-table th {
            background-color: #f8f9fa;
        }

        .tt {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            color: rgb(5, 34, 12);
            font-weight: bold;
            text-align: center;
        }

        body {
            font-family: 'Roboto', sans-serif;
            background-color: #f8f9fa;
        }

        .sidebar {

            background-color: #131f2b;
            min-height: 100vh;
            color: #fff;

        }

        .sidebar .nav-link {
            color: #fff;
        }

        footer {
            background-color: #131f2b;
            padding: 10px;
            text-align: center;
            width: 100%;
            color: white;
            font-family: Arial, Helvetica, sans-serif;
        }

        .sidebar .nav-link:hover {
            background-color: #495057;
        }

        .main-content {
            background-color: #fff;
            border-radius: 10px;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
        }

        .cgpa {
            font-size: 1.5rem;
            font-weight: bold;
            color: #0b3815;
        }

        .logo {
            max-width: 120px;
        }
    </style>
</head>

<body>
    <div class="container-fluid">
        <div class="row">
            <!-- Sidebar -->
            <nav class="col-md-3 col-lg-2 d-md-block sidebar collapse">
                <div class="position-sticky pt-3">
                    <div class="text-center mb-4 d-flex justify-content-between align-items-center ">
                        <img src="/images/unical-logo.png" alt="University of Calabar Logo" class="img-fluid logo"
                            style="max-width:4rem;">
                        <small>UNIVERSITY OF CALABAR</small>
                    </div>
                    <ul class="nav flex-column">
                        <li class="nav-item">
                            <a class="nav-link active" href="#" id="DashBoardLink">
                                <i class="bi bi-speedometer2 me-2"></i> Dashboard
                            </a>
                        </li>

                        <li class="nav-item">
                            <a class="nav-link" href="#" id="uploadLink">
                                <i class="bi bi-camera-video me-2"></i> Lectures & Resoures
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#" id="timeTableLink">
                                <i class="bi bi-calendar3 me-2"></i> Timetable
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link " href="#" id="assignmentLink">
                                <i class="fas fa-upload me-2"></i>
                                Submit Assigment
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link " href="#" id="cbtExamLink">
                                <i class="fas fa-desktop me-2"></i>
                                CBT Exams
                            </a>
                        </li>
                        <li class="nav-item  d-flex"
                            style=" padding-bottom: 1rem; margin-top: 2rem; justify-content: center; ">

                            <button class="btn btn-secondary" type="button" onclick="logout()">Logout</button>


                        </li>
                    </ul>
                </div>
            </nav>

            <!-- Main content -->
            <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4">
                <div class="d-none" id="timeTableSection">
                    <h2 class="mb-4">Timetable</h2>
                    <!-- <div id="timeTableContainer" class="timetable"></div> -->
                    <ul class="nav nav-tabs" id="semesterTabs" role="tablist">
                        <li class="nav-item" role="presentation">
                            <button class="nav-link active" id="first-semester-tab" data-bs-toggle="tab"
                                data-bs-target="#first-semester" type="button" role="tab" aria-controls="first-semester"
                                aria-selected="true">First Semester</button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="second-semester-tab" data-bs-toggle="tab"
                                data-bs-target="#second-semester" type="button" role="tab"
                                aria-controls="second-semester" aria-selected="false">Second Semester</button>
                        </li>
                    </ul>

                    <div class="tab-content mt-3" id="semesterTabContent">
                        <div class="tab-pane fade show active" id="first-semester" role="tabpanel"
                            aria-labelledby="first-semester-tab">
                            <table class="table table-bordered timetable">
                                <thead>
                                    <tr>
                                        <th>Time</th>
                                        <th>Monday</th>
                                        <th>Tuesday</th>
                                        <th>Wednesday</th>
                                        <th>Thursday</th>
                                        <th>Friday</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr>
                                        <th>8:00 - 10:00</th>
                                        <td>
                                            <div class="course-cell">CSC611<br>Computer Communications and
                                                Network<br>DR. AGANA & DR. ESSIEN</div>
                                        </td>
                                        <td></td>
                                        <td>
                                            <div class="course-cell">CSC621<br>Advanced Computer
                                                Architecture<br>DR.OGBAN & DR. ELE</div>
                                        </td>
                                        <td></td>
                                        <td>
                                            <div class="course-cell">CSC631<br>Software Engineering<br>PROF. EKABUA &
                                                DR. (MRS) ETENG</div>
                                        </td>
                                    </tr>
                                    <tr>
                                        <th>10:00 - 12:00</th>
                                        <td></td>
                                        <td>
                                            <div class="course-cell">CSC681<br>Compiler Design and
                                                Construction<br>DR.OFEM & DR. ODEY</div>
                                        </td>
                                        <td></td>
                                        <td>
                                            <div class="course-cell">CSC633<br>Bioinformatics<br>DR. ARIKPO & PROF. ESIN
                                            </div>
                                        </td>
                                        <td></td>
                                    </tr>
                                    <tr>
                                        <th>12:00 - 14:00</th>
                                        <td colspan="5" class="text-center">Lunch Break</td>
                                    </tr>
                                    <tr>
                                        <th>14:00 - 16:00</th>
                                        <td>
                                            <div class="course-cell">CSC621<br>Advanced Computer
                                                Architecture<br>DR.OGBAN & DR. ELE</div>
                                        </td>
                                        <td></td>
                                        <td>
                                            <div class="course-cell">CSC611<br>Computer Communications and
                                                Network<br>DR. AGANA & DR. ESSIEN</div>
                                        </td>
                                        <td>
                                            <div class="course-cell">CSC631<br>Software Engineering<br>PROF. EKABUA &
                                                DR. (MRS) ETENG</div>
                                        </td>
                                        <td></td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                        <div class="tab-pane fade" id="second-semester" role="tabpanel"
                            aria-labelledby="second-semester-tab">
                            <table class="table table-bordered timetable">
                                <thead>
                                    <tr>
                                        <th>Time</th>
                                        <th>Monday</th>
                                        <th>Tuesday</th>
                                        <th>Wednesday</th>
                                        <th>Thursday</th>
                                        <th>Friday</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr>
                                        <th>8:00 - 10:00</th>
                                        <td>
                                            <div class="course-cell">CSC864<br>Mobile/Adaptive Technologies<br>DR. O.A.
                                                OFEM & DR. B.I.ELE</div>
                                        </td>
                                        <td></td>
                                        <td>
                                            <div class="course-cell">CSC852<br>Operating System<br>DR.I.I ARIKPO & DR
                                                E.E. ESSIEN</div>
                                        </td>
                                        <td></td>
                                        <td>
                                            <div class="course-cell">CSC865<br>Advance Database Systems<br>PROF. E.E
                                                WILLIAMS & DR. J.A ODEY</div>
                                        </td>
                                    </tr>
                                    <tr>
                                        <th>10:00 - 12:00</th>
                                        <td></td>
                                        <td>
                                            <div class="course-cell">CSC892<br>Programming Languages<br>DR (MRS) I.E.
                                                ETENG & DR. O.A .OFEM</div>
                                        </td>
                                        <td></td>
                                        <td>
                                            <div class="course-cell">CSC862<br>Advance Computer Algorithms<br>PROF.
                                                O.EKABUA & DR.F.U. OGBAN</div>
                                        </td>
                                        <td></td>
                                    </tr>
                                    <tr>
                                        <th>12:00 - 14:00</th>
                                        <td colspan="5" class="text-center">Lunch Break</td>
                                    </tr>
                                    <tr>
                                        <th>14:00 - 16:00</th>
                                        <td>
                                            <div class="course-cell">CSC892<br>Object Oriented Programming<br>DR. M.A.
                                                AGANA & DR. B. I. ELE</div>
                                        </td>
                                        <td></td>
                                        <td>
                                            <div class="course-cell">CSC864<br>Mobile/Adaptive Technologies<br>DR. O.A.
                                                OFEM & DR. B.I.ELE</div>
                                        </td>
                                        <td>
                                            <div class="course-cell">CSC865<br>Advance Database Systems<br>PROF. E.E
                                                WILLIAMS & DR. J.A ODEY</div>
                                        </td>
                                        <td></td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
                <div class="main-content p-4" id="DashBoardSection">
                    <div class="row align-items-center mb-4">
                        <div class="col-md-8  ">
                            <h3 class="mb-0 lh-sm">Welcome, <span style="color:green ;">
                                    <%= student.fullName %>!
                                </span></h3>
                            <p class="text-muted lh-sm">Matric Number: <%= student.matricNumber %>
                            </p>
                        </div>
                        <div class="col-md-4 text-end shadow-sm p-3 mb-5 bg-body rounded">
                            <div class="cgpa">3.74</div>
                            <small class="mb-0">Current CGPA</small>
                        </div>
                    </div>

                    <div class="row mb-4">
                        <div class="col-md-6 mb-3 shadow p-3  bg-body rounded">
                            <div class="card">
                                <div class="card-body">
                                    <h5 class="card-title tt">Personal Information</h5>
                                    <p><strong>Email:</strong>
                                        <%= student.email %>
                                    </p>
                                    <p><strong>Faculty:</strong>
                                        <%= student.faculty %>
                                    </p>
                                    <p><strong>Department:</strong>
                                        <%= student.department %>
                                    </p>
                                    <p><strong>Degree Level:</strong>
                                        <%= student.degreeLevel %>
                                    </p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6 mb-3 shadow p-3 bg-body rounded">
                            <div class="card">
                                <div class="card-body">
                                    <h5 class="card-title tt">Virtual Classes</h5>
                                    <button type="button" class="btn btn-primary" onclick="refreshVirtualClasses()">
                                        Refresh <span class="badge bg-secondary" id="classCount">
                                            <%= student.virtualClasses.length%> classes
                                        </span>
                                    </button>
                                    <div id="virtualClassesContainer">
                                        <% if (student.virtualClasses && student.virtualClasses.length> 0) { %>
                                            <div class="table-responsive">
                                                <table class="table table-striped">
                                                    <thead>
                                                        <tr>
                                                            <th>Course</th>
                                                            <th>Start Time</th>
                                                            <th>Actions</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        <% student.virtualClasses.forEach((virtualClass, index)=> { %>
                                                            <tr>
                                                                <td>
                                                                    <%= virtualClass.course %>
                                                                </td>
                                                                <td>
                                                                    <%= new
                                                                        Date(virtualClass.startTime).toLocaleString() %>
                                                                </td>
                                                                <td>
                                                                  
                                                                    <span class="btn btn-primary btn-sm"
                                                                        onclick="joinedVirtualClass('<%= index %>', '<%= virtualClass.link %>');"
                                                                        id="joinedVirtualClass">
                                                                        Join Class
                                                                    </span>
                                                                    <button onclick="deleteVirtualClass('<%= index %>')"
                                                                        class="btn btn-danger btn-sm">Delete</button>
                                                                </td>
                                                            </tr>
                                                            <% }) %>
                                                    </tbody>
                                                </table>
                                            </div>
                                            <% } else { %>
                                                <p>No virtual classes available.</p>
                                                <% } %>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row mt-4">
                        <div class="col-12">
                            <div class="card">

                            </div>
                        </div>
                    </div>
                </div>
                <div id="uploadsSection" class="d-none">
                    <h2>Uploaded Resources</h2>
                    <table class="table table-striped shadow-sm p-3 mb-5">
                        <thead>
                            <tr>
                                <th>File Name</th>
                                <th>Course</th>
                                <th>Lecturer</th>
                                <th>Uploaded Date</th>
                                <th>Size</th>
                                <th>Type</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="uploadsListBody" class="shadow-sm p-3 mb-5">
                            <!-- Uploaded videos list will be populated here -->
                        </tbody>
                    </table>

                </div>
                <div id="assignmentSection" class="d-none">
                    <h2>Submitted Assignments</h2>
                    <table class="table table-striped shadow-sm p-3 mb-5">
                        <thead>
                            <tr>
                                <th>Assigment Name</th>
                                <th>Course</th>
                                <th>Department</th>
                                <th>Submitted Date</th>
                                <th>Size</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="assignmentListBody">
                            <!-- Uploaded videos list will be populated here -->
                        </tbody>
                    </table>

                    <div class="mt-3 shadow col-6 p-3 mb-5">
                        <label for="courseSelect" class="form-label">Select Course:</label>
                        <select id="courseSelect" class="form-select" required>
                            <!-- Populate course options dynamically -->
                        </select>

                        <label for="departmentSelect" class="form-label mt-3">Select Department:</label>
                        <select id="departmentSelect" class="form-select" required>
                            <!-- Populate department options dynamically -->
                        </select>
                        <br />
                        <button class="btn btn-primary" onclick="openFileUpload()">Submit Assignment</button>
                        <input type="file" id="fileUpload" style="display: none;" accept="video/*"
                            onchange="uploadAssignment()">
                    </div>
                </div>
                <div id="cbtExamSection" class="d-none">
                    <h1 class="mb-4">Student Dashboard - CBT Exam</h1>
                    <div id="availableExams">
                        <h2>Available Exams</h2>
                        <ul id="examList" class="list-group"></ul>
                    </div>
                    <div id="resultContainer" style="display: none;">
                        <h2>Exam Results</h2>
                        <p>Score: <span id="scoreDisplay"></span></p>
                        <div id="answersContainer"></div>
                    </div>
                    <div id="examView">
                        <div id="timerDisplay"></div>
                        <div class="container mt-5">
                            <h2 id="examTitle"></h2>
                            <div id="questionContainer"></div>
                            <button id="submitExamBtn" class="btn btn-primary mt-3">Submit Exam</button>
                        </div>
                    </div>
                </div>



            </main>
            <footer class="text-center">
                <p>Developed by <strong>EKPOR JOHN NKANU.</strong> This app facilitates low-bandwidth, real-time virtual
                    classroom sessions. © 2024.</p>
            </footer>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script>
        loadCourses()
        function showSection(sectionId) {
            document.querySelectorAll('main > div').forEach(div => div.classList.add('d-none'));
            document.getElementById(sectionId).classList.remove('d-none');
        }
        document.getElementById('DashBoardLink').addEventListener('click', function (e) {
            e.preventDefault();
            showSection('DashBoardSection');
        });

        document.getElementById('uploadLink').addEventListener('click', function (e) {
            e.preventDefault();
            showSection('uploadsSection');
            loadUploads();
        });
        document.getElementById('cbtExamLink').addEventListener('click', (e) => {
            e.preventDefault();
            showSection('cbtExamSection')
        })
        document.getElementById('timeTableLink').addEventListener('click', function (e) {
            e.preventDefault();
            showSection('timeTableSection');
            // loadTimetable();
        });
        document.getElementById('assignmentLink').addEventListener('click', function (e) {
            e.preventDefault();
            showSection('assignmentSection');
            loadAssignments();
        });
        function openFileUpload() {
            document.getElementById('fileUpload').click();
        }
        function loadCourses() {
            axios.get('/api/courses2')
                .then(function (response) {
                    const courseSelect = document.getElementById('courseSelect');
                    const department = document.getElementById('departmentSelect')
                    response.data.courses.forEach(course => {
                        const courze = `
                 <option value=${course._id}>${course.courses}</option>`;
                        const departmentz = `
                 <option value=${course._id}>${course.department}</option>`;
                        courseSelect.innerHTML += courze;
                        department.innerHTML += departmentz;
                    })
                })
                .catch(function (error) {
                    console.error('Error loading courses:', error);
                    alert('Failed to load courses. Please try again.');
                });
        }

        function uploadAssignment() {
            const fileInput = document.getElementById('fileUpload');
            const file = fileInput.files[0];
            const courseSelect = document.getElementById('courseSelect');
            const departmentSelect = document.getElementById('departmentSelect');
            if (!file || !courseSelect.value || !departmentSelect.value) {
                alert('Please select a file and course before uploading.');
                return;
            }

            const formData = new FormData();
            formData.append('filename', file);
            formData.append('courseId', courseSelect.value);
            formData.append('departmentId', departmentSelect.value);

            axios.post('/api/uploadAssignment', formData, {
                headers: {
                    'Content-Type': 'multipart/form-data'
                }
            })
                .then(function (response) {
                    alert('Assignment uploaded successfully');
                    loadAssignments();
                })
                .catch(function (error) {
                    console.error('Error uploading assignment:', error);
                    alert('Failed to upload assignment. Please try again.');
                });
        }
        // Add these functions to your existing JavaScript
        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }
        function loadAssignments() {
            axios.get('/api/getUploadedAssignments')
                .then(function (response) {
                    const assignmentListBody = document.getElementById('assignmentListBody');
                    assignmentListBody.innerHTML = '';
                    console.log(response.data)
                    response.data.assignments.forEach(assignment => {
                        const row = `
                    <tr>
                        <td>${assignment.fileName}</td>
                        <td>${assignment.courseId}</td>
                        <td>${assignment.departmentId}</td>
                        <td>${new Date(assignment.uploadDate).toLocaleString()}</td>
                        <td>${formatFileSize(assignment.size)}</td>
                        <td>
                            <a href="${assignment.downloadURL}" class="btn btn-sm btn-primary" target="_blank">View</a>
                            <button class="btn btn-danger btn-sm" onclick="deleteAssignment('${assignment._id}')">Delete</button>
                        </td>
                    </tr>
                `;
                        assignmentListBody.innerHTML += row;
                    });
                })
                .catch(function (error) {
                    console.error('Error loading assignments:', error);
                    alert('Failed to load assignments. Please try again.');
                });
        }
        function deleteAssignment(assignmentId) {
            if (confirm('Are you sure you want to delete this assignment?')) {
                axios.delete(`/api/deleteAssignment/${assignmentId}`)
                    .then(function (response) {
                        alert('Assignment deleted successfully');
                        loadAssignments();
                    })
                    .catch(function (error) {
                        console.error('Error deleting assignment:', error);
                        alert('Failed to delete assignment. Please try again.');
                    });
            }
        }
        async function logout() {
            try {
                const response = await fetch('/api/logout', { method: 'POST' });
                const data = await response.json();
                if (data.success) {
                    // Redirect to login page or home page
                    window.location.href = '/student/login';
                } else {
                    console.error('Logout failed:', data.message);
                }
            } catch (error) {
                console.error('Error during logout:', error);
            }
        }
        function refreshVirtualClasses() {
            fetch('/api/refresh-virtual-classes')
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        updateVirtualClassesDisplay(data.virtualClasses);
                    } else {
                        alert('Failed to refresh virtual classes');
                    }
                })
                .catch((error) => {
                    console.error('Error:', error);
                    alert('An error occurred while refreshing virtual classes');
                });
        }

        function updateVirtualClassesDisplay(virtualClasses) {
            const container = document.getElementById('virtualClassesContainer');
            const classCount = document.getElementById('classCount');
            classCount.textContent = `${virtualClasses.length} classes`;

            if (virtualClasses.length > 0) {
                let html = '<div class="table-responsive"><table class="table table-striped"><thead><tr><th>Course</th><th>Start Time</th><th>Actions</th></tr></thead><tbody>';
                virtualClasses.forEach((virtualClass, index) => {
                    html += `
                <tr>
                    <td>${virtualClass.course}</td>
                    <td>${new Date(virtualClass.startTime).toLocaleString()}</td>
                    <td>
                        <a href="${virtualClass.link}" class="btn btn-primary btn-sm" target="_blank">Join Class</a>
                        <button onclick="deleteVirtualClass('${index}')" class="btn btn-danger btn-sm">Delete</button>
                    </td>
                </tr>
            `;
                });
                html += '</tbody></table></div>';
                container.innerHTML = html;
            } else {
                container.innerHTML = '<p>No virtual classes available.</p>';
            }
        }

        function deleteVirtualClass(index) {
            if (confirm('Are you sure you want to delete this virtual class?')) {
                fetch('/api/delete-virtual-class', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ index: index }),
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            alert('Virtual class deleted successfully');
                            refreshVirtualClasses(); // Refresh the list after deletion
                        } else {
                            alert('Failed to delete virtual class');
                        }
                    })
                    .catch((error) => {
                        console.error('Error:', error);
                        alert('An error occurred while deleting the virtual class');
                    });
            }
        }
        function joinedVirtualClass(index, link) {
            console.log("attempting to join virtual class", index, link)
            fetch('/api/joinedVirtualClass', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ index: index }),
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        console.log(data.success);
                        // Navigate to the link after successful registration
                        window.open(link, '_blank'); // Open in new tab
                    } else {
                        console.log('Failed to register attendance');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                });
        }
        async function loadUploads() {
            try {
                const response = await fetch('/api/studentGetUploadedMedia');
                const data = await response.json();
                if (response.ok) {
                    updateUploadsList(data.uploads);
                } else {
                    alert('Failed to load uploads: ' + data.error);
                }
            } catch (error) {
                console.error('Error loading uploads:', error);
                alert('An error occurred while loading uploads');
            }
        }

        function updateUploadsList(uploads) {
            const uploadsListBody = document.getElementById('uploadsListBody');
            uploadsListBody.innerHTML = '';

            if (uploads.length > 0) {
                uploads.forEach(upload => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                <td>${upload.fileName}</td>
                <td>${upload.courseId}</td>
                <td>${upload.lecturerName}</td>
                <td>${new Date(upload.uploadDate).toLocaleString()}</td>
                <td>${(upload.size / 1024).toFixed(2)} KB</td>
                <td>${upload.contentType}</td>
                
                <td>
                    <a href="${upload.downloadURL}" class="btn btn-primary btn-sm" target="_blank">View/save</a>
                
                </td>
            `;
                    uploadsListBody.appendChild(row);
                });
            } else {
                uploadsListBody.innerHTML = '<tr><td colspan="6">No uploads available.</td></tr>';
            }
        }

        timeTableLink.addEventListener('click', async () => {
            try {
                const response = await fetch('/api/timetable');
                const data = await response.json();
                if (response.ok) {
                    renderTimetable(data.timetable);
                    // TimetableSection.classList.remove('d-none');
                    // DashBoardSection.classList.add('d-none');
                } else {
                    console.error('Error fetching timetable:', data.error);
                }
            } catch (error) {
                console.error('An error occurred while fetching the timetable:', error);
            }
        });

        function renderTimetable(timetable) {
            timeTableContainer.innerHTML = '';
            const table = document.createElement('table');
            table.className = 'timetable-table';

            const thead = document.createElement('thead');
            const daysRow = document.createElement('tr');
            const timeRow = document.createElement('tr');

            ['Time', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'].forEach(day => {
                const th = document.createElement('th');
                th.innerText = day;
                daysRow.appendChild(th);
            });

            table.appendChild(daysRow);
            table.appendChild(timeRow);

            const times = [
                '8:00 AM - 9:00 AM',
                '9:00 AM - 10:00 AM',
                '10:00 AM - 11:00 AM',
                '11:00 AM - 12:00 PM',
                '12:00 PM - 1:00 PM',
                '1:00 PM - 2:00 PM',
                '2:00 PM - 3:00 PM'
            ];

            times.forEach(time => {
                const row = document.createElement('tr');
                const timeCell = document.createElement('td');
                timeCell.innerText = time;
                row.appendChild(timeCell);

                ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'].forEach(day => {
                    const cell = document.createElement('td');
                    const course = timetable[day].find(c => c.time === time);
                    if (course) {
                        cell.innerHTML = `<strong>${course.course}</strong><br><small>${course.lecturer}</small>`;
                    }
                    row.appendChild(cell);
                });

                table.appendChild(row);
            });

            timeTableContainer.appendChild(table);
        }

        document.addEventListener('DOMContentLoaded', function () {
            const examList = document.getElementById('examList');
            const examView = document.getElementById('examView');
            const questionContainer = document.getElementById('questionContainer');
            const submitExamBtn = document.getElementById('submitExamBtn');
            const resultContainer = document.getElementById('resultContainer');
            const scoreDisplay = document.getElementById('scoreDisplay');
            const answersContainer = document.getElementById('answersContainer');
            const timerDisplay = document.getElementById('timerDisplay');

            const studentId = 'student_id_here'; // Replace with actual student ID or fetch from session
            let currentExam = null;
            let timer = null;

            fetchAvailableExams();

            function fetchAvailableExams() {
                axios.get(`/api/student/available-exams`)
                    .then(response => {
                        const exams = response.data;
                        console.log(exams)
                        examList.innerHTML = '';
                        exams.forEach(exam => {
                            const li = document.createElement('li');
                            li.className = 'list-group-item col-6 ';
                            li.textContent = `${exam.course} - Starts at ${new Date(exam.startTime).toLocaleString()}`;
                            li.addEventListener('click', () => loadExam(exam._id));
                            examList.appendChild(li);
                            examList.appendChild(document.createElement('br'))
                        });
                    })
                    .catch(error => {
                        console.error('Error fetching available exams:', error);
                        alert('Error fetching available exams. Please try again.');
                    });
            }

            function loadExam(examId) {
                axios.get(`/api/student/exam/${examId}`)
                    .then(response => {
                        currentExam = response.data;
                        console.log(currentExam)
                        startExam();
                    })
                    .catch(error => {
                        console.error('Error loading exam:', error);
                        if (error.response) {
                            // Server responded with an error
                            alert(error.response.data.message);
                        } else {
                            // Other error occurred
                            alert('Error loading exam. Please try again.');
                        }
                    });
            }

            function startExam() {
                examView.style.display = 'block';
                document.getElementById('examTitle').textContent = `Exam: ${currentExam.course}`;
                displayQuestions();
                startTimer(currentExam.examDuration);
            }

            function displayQuestions() {
                questionContainer.innerHTML = '';
                currentExam.questions.forEach((question, index) => {
                    const questionDiv = document.createElement('div');
                    questionDiv.className = 'mb-3';
                    questionDiv.innerHTML = `
                <p><strong>Question ${index + 1}:</strong> ${question.question}</p>
                ${question.options.map((option, optIndex) => `
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question${index}" id="option${index}_${optIndex}" value="${option}">
                        <label class="form-check-label" for="option${index}_${optIndex}">${option}</label>
                    </div>
                `).join('')}
            `;
                    questionContainer.appendChild(questionDiv);
                });
            }

            function startTimer(duration) {
                let timeLeft = parseDuration(duration);
                updateTimerDisplay(timeLeft);

                timer = setInterval(() => {
                    timeLeft--;
                    updateTimerDisplay(timeLeft);

                    if (timeLeft <= 0) {
                        clearInterval(timer);
                        submitExam();
                    }
                }, 1000);
            }

            function parseDuration(duration) {
                const [hours, minutes] = duration.split(':').map(Number);
                return hours * 3600 + minutes * 60;
            }

            function updateTimerDisplay(seconds) {
                const hours = Math.floor(seconds / 3600);
                const minutes = Math.floor((seconds % 3600) / 60);
                const remainingSeconds = seconds % 60;
                timerDisplay.textContent = `${padZero(hours)}:${padZero(minutes)}:${padZero(remainingSeconds)}`;
            }

            function padZero(num) {
                return num.toString().padStart(2, '0');
            }

            submitExamBtn.addEventListener('click', submitExam);

            function submitExam() {
                clearInterval(timer);
                const answers = currentExam.questions.map((_, index) => {
                    const selectedOption = document.querySelector(`input[name="question${index}"]:checked`);
                    return selectedOption ? selectedOption.value : null;
                });

                if (answers.some(answer => answer === null)) {
                    if (!confirm('You have unanswered questions. Are you sure you want to submit?')) {
                        startTimer(getTimeLeft()); // Restart the timer if the user decides not to submit
                        return;
                    }
                }

                axios.post('/api/student/submit-exam', {

                    examId: currentExam._id,
                    answers: answers
                })
                    .then(response => {
                        displayResults(response.data);
                    })
                    .catch(error => {
                        console.error('Error submitting exam:', error);
                        alert('Error submitting exam. Please try again.');
                    });
            }

            function getTimeLeft() {
                const [hours, minutes, seconds] = timerDisplay.textContent.split(':').map(Number);
                return `${hours}:${minutes}:${seconds}`;
            }

            function displayResults(results) {
                examView.style.display = 'none';
                resultContainer.style.display = 'block';
                scoreDisplay.textContent = `${results.score} / ${results.totalQuestions}`;
                answersContainer.innerHTML = '';
                results.answers.forEach((answer, index) => {
                    const answerDiv = document.createElement('div');
                    answerDiv.className = `mb-3 ${answer.isCorrect ? 'text-success' : 'text-danger'}`;
                    answerDiv.innerHTML = `
                <p><strong>Question ${index + 1}:</strong> ${answer.question}</p>
                <p>Your answer: ${answer.studentAnswer}</p>
                <p>Correct answer: ${answer.correctAnswer}</p>
            `;
                    answersContainer.appendChild(answerDiv);
                });
            }
        });
    </script>
</body>

</html>