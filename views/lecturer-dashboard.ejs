<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Lecturer Dashboard</title>

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <style>
        .addpointer{
            cursor: pointer;
        }
        footer {
            background-color: #131f2b;
            padding: 10px;
            text-align: center;
            width: 100%;
            color: white;
            font-family: Arial, Helvetica, sans-serif;
        }

        .sidebar {
            height: 100vh;
            background-color: #131f2b;
        }

        body {
            box-sizing: border-box;
            margin: 0;
        }
    </style>
</head>

<body>
    <!-- Student Modal -->
    <div class="modal fade" id="studentModal" tabindex="-1" aria-labelledby="studentModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="studentModalLabel">Students in <span id="courseName"></span></h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Matric Number</th>
                                <th>Department</th>
                            </tr>
                        </thead>
                        <tbody id="studentModalBody">
                            <!-- Student list will be populated here -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
    <div class="container-fluid">
        <div class="row">
            <!-- Sidebar -->
            <nav class="col-md-3 col-lg-2 d-md-block sidebar collapse" style="padding:0px; margin:0px">
                <div class="position-sticky">
                    <div class="d-flex justify-content-between align-items-center mb-4"
                        style="border-bottom: .5px solid rgb(155, 149, 149); padding-bottom: 1rem; padding-top: .3rem;">
                        <img src="/images/unical-logo.png" alt="School Logo" class="img-fluid" style="max-width:4rem;">
                        <small class="text-white bold ms-3" style="padding-right: -2rem;">UNIVERSITY OF CALABAR</small>
                    </div>
                    <ul class="nav flex-column">
                        <li class="nav-item d-flex justify-content-between box-shadow"
                            style="border-bottom: .5px solid rgb(155, 149, 149); padding-bottom: 1rem;">
                            <a class="nav-link active text-white" href="#" id="courseListLink">
                                <i class="fas fa-book me-2"></i>
                                Courses
                            </a>
                        </li>
                        <li class="nav-item d-flex justify-content-between"
                            style="border-bottom: .5px solid rgb(155, 149, 149); padding-bottom: 1rem;">
                            <a class="nav-link text-white" href="#" id="startVirtualClassLink">
                                <i class="fas fa-video me-2"></i>
                                Start Virtual Class
                            </a>
                        </li>
                        <li class="nav-item d-flex justify-content-between"
                            style="border-bottom: .5px solid rgb(155, 149, 149); padding-bottom: 1rem;">
                            <a class="nav-link text-white" href="#" id="uploadsLink">
                                <i class="fas fa-upload me-2"></i>
                                Upload Lecture Resources
                            </a>
                        </li>
                        <li class="nav-item d-flex justify-content-between"
                            style="border-bottom: .5px solid #9b9595; padding-bottom: 1rem;">
                            <a class="nav-link text-white" href="#" id="attendanceLink">
                                <i class="fas fa-check-circle"></i>
                                attendance
                            </a>
                        </li>
                        <li class="nav-item d-flex justify-content-between"
                            style="border-bottom: .5px solid #9b9595; padding-bottom: 1rem;">
                            <a class="nav-link text-white" href="#" id="viewAssignmentsLink">
                                <i class="fas fa-upload me-2"></i>
                                Students assignments
                            </a>
                        </li>
                        <li class="nav-item d-flex justify-content-between"
                            style="border-bottom: .5px solid #9b9595; padding-bottom: 1rem;">
                            <a class="nav-link text-white" href="#" id="cbtLink">
                                <i class="fas fa-desktop me-2"></i>
                                CBT
                            </a>
                        </li>
                        <li class="nav-item d-flex"
                            style="padding-bottom: 1rem; margin-top: 2rem; justify-content: center;">
                            <button class="btn btn-secondary" type="button" onclick="logout()">Logout</button>
                        </li>
                    </ul>
                </div>
            </nav>

            <!-- Main content -->
            <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4">
                <div id="alertPlaceholder"></div>
                

                <!-- Course List Section -->
                <div id="courseListSection" class="d-none">
                    <div
                    class="d-flex shadow col-6 p-3 mb-5 justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
                    <h1 class="h2">Welcome, <span id="adminName">
                            <%= lecturer.fullName %>
                        </span></h1>
                </div>
                    <h2>Courses</h2>
                    <table class="table table-striped shadow col-6 p-3 mb-5">
                        <thead>
                            <tr>
                                <th>Course</th>
                                <th>Course Code</th>
                                <th>Department</th>
                                <th>Faculty</th>
                                <th>Number of Students</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody class="shadow col-6 p-3 mb-5" id="courseListBody">
                            <!-- Course list will be populated here -->
                        </tbody>
                    </table>
                </div>

                <!-- Start Virtual Class Section -->
                <div id="startVirtualClassSection" class="d-none" style="position: absolute;left: 50%; top: 40%;">
                    <h3>Start a Virtual Class</h3>
                    <div class="d-grid gap-2 col-6 mx-auto">
                        <button class="btn btn-primary" type="button" onclick="startVirtualClass()">Start Virtual
                            Class</button>
                    </div>
                </div>

                <!-- Uploads Section -->
                <div id="uploadsSection" class="d-none">
                    <h2>Uploaded Resource</h2>
                    <table class="table table-striped shadow col-6 p-3 mb-5">
                        <thead>
                            <tr>
                                <th>File Name</th>
                                <th>Upload Date</th>
                                <th>Size</th>
                                <th>Type</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="uploadsListBody" class="shadow col-6 p-3 mb-5">
                            <!-- Uploaded videos list will be populated here -->
                        </tbody>
                    </table>

                    <div class="mt-3 shadow col-6 p-3 mb-5">
                        <label for="courseSelect" class="form-label">Select Course:</label>
                        <select id="courseSelect" class="form-select" required>
                            <!-- Populate course options dynamically -->
                        </select>

                        <label for="departmentSelect" class="form-label mt-3">Select Department:</label>
                        <select id="departmentSelect" class="form-select" required>
                            <!-- Populate department options dynamically -->
                        </select>
                        <br />
                        <button class="btn btn-primary" onclick="openFileUpload()">Upload New Resource</button>
                        <input type="file" id="fileUpload" style="display: none;" accept="video/*"
                            onchange="uploadFile()">
                    </div>
                </div>

                <!-- attendance Section -->
                <div id="attendanceSection" class="d-none">
                    <h2 class="shadow col-6 p-3 mb-5">Attendance Recorder</h2>
                    <div id="attendanceContainer" class="row shadow  p-3 mb-5">

                    </div>
                </div>

                <div id="viewAssignmentsSection" class="d-none">
                    <h2>Student Assignments</h2>
                    <table class="table table-striped shadow p-3 mb-5">
                        <thead>
                            <tr>
                                <th>Student Name</th>
                                <th>File Name</th>
                                <th>Course</th>
                                <th>Upload Date</th>
                                <th>Size</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="assignmentListBody" class="shadow  p-3 mb-5">
                            <!-- Assignment list will be populated here -->
                        </tbody>
                    </table>
                </div>
                <!--CBT Section-->
                <div id="CbtSection" class="d-none">
                    <h2>CBT</h2>
                    <ul class="nav nav-tabs mb-3" id="dashboardTabs" role="tablist">
                        <li class="nav-item" role="presentation">
                            <button class="nav-link active" id="create-exam-tab" data-bs-toggle="tab"
                                data-bs-target="#create-exam" type="button" role="tab" aria-controls="create-exam"
                                aria-selected="true">Create Exam</button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="view-results-tab" data-bs-toggle="tab"
                                data-bs-target="#view-results" type="button" role="tab" aria-controls="view-results"
                                aria-selected="false">View Results</button>
                        </li>
                    </ul>
                    <div class="tab-content" id="dashboardTabContent">

                        <div class="tab-pane fade show active" id="create-exam" role="tabpanel"
                            aria-labelledby="create-exam-tab">
                            <h1 class="mb-4">Create CBT Exam</h1>
                            <form id="cbtExamForm" class="shadow  p-3 mb-5">
                                <button type="submit" class="btn btn-success mt-3 float-end">Finish and Save
                                    Exam</button>
                                <div class="mb-3 col-md-6 form-group">
                                    <label for="course" class="form-label">Course</label>
                                    <select class="form-control form-select" id="course" name="course" required>
                                        <option value="">Select a course</option>
                                        <option value="Mobile/Adaptive Technologies">Mobile/Adaptive Technologies
                                        </option>
                                        <option value="Operating System">Operating System</option>
                                        <option value="Advance Database Systems">Advance Database Systems</option>
                                        <option value="Programming Languages">Programming Languages</option>
                                        <option value="Object Oriented Programming">Object Oriented Programming</option>
                                        <option value="Advance Computer Algorithms">Advance Computer Algorithms</option>
                                        <option value="BioInformatics">BioInformatics</option>
                                        <option value="Compiler Design and Construction">Compiler Design and
                                            Construction
                                        </option>
                                        <option value="Software Engineering">Software Engineering</option>
                                        <option value="Advance Computer Architecture">Advance Computer Architecture
                                        </option>
                                        <option value="Computer Communications and Network">Computer Communications and
                                            Network</option>



                                    </select>
                                </div>
                                <div class="mb-3 col-md-6 form-group">
                                    <label for="department" class="form-label">Select Department</label>
                                    <select class="form-control form-select" id="department" name="department" required>
                                        <option value="">select Department</option>
                                        <option value="computer_science">Computer Science</option>
                                        <option value="mathematics">Mathematics</option>
                                        <option value="physics">Physics</option>
                                        <option value="chemistry">Chemistry</option>
                                        <option value="biology">Biology</option>
                                        <option value="geology">Geology</option>
                                        <option value="statistics">Statistics</option>
                                        <option value="biochemistry">Biochemistry</option>
                                        <option value="microbiology">Microbiology</option>
                                        <option value="environmental_science">Environmental Science</option>
                                        <option value="electrical_engineering">Electrical Engineering</option>
                                        <option value="mechanical_engineering">Mechanical Engineering</option>
                                        <option value="civil_engineering">Civil Engineering</option>
                                        <option value="chemical_engineering">Chemical Engineering</option>
                                        <option value="biomedical_engineering">Biomedical Engineering</option>
                                        <option value="aerospace_engineering">Aerospace Engineering</option>
                                    </select>
                                </div>
                                <div class="mb-3 col-md-6 form-group">
                                    <label for="startTime" class="form-label">Exam Start Time</label>
                                    <input type="datetime-local" class="form-control col-md-6" id="startTime" required>
                                </div>
                                <div class="mb-3 col-md-6 form-group">
                                    <label for="examDuration" class="form-label">Exam Duration</label>
                                    <input type='time' class="form-control col-md-6" id="examDuration" required>
                                </div>
                                <button type="button" class="btn btn-primary" id="addQuestionBtn">Add
                                    Question</button><br />
                            </form>
                            <div id="questionsContainer" class="mb-3 border mt-5  form-group d-flex flex-wrap shadow  p-3 mb-5">
                                <!-- Questions will be added here dynamically -->
                            </div>
                        </div>

                        <div class="tab-pane fade" id="view-results" role="tabpanel" aria-labelledby="view-results-tab">
                            <h2>Exam Results</h2>
                            <table class="table table-striped shadow  p-3 mb-5">
                                <thead>
                                    <tr>
                                        <th>Student Name</th>
                                        <th>Department</th>
                                        <th>Course</th>
                                        <th>Score</th>
                                        <th>Total Questions</th>
                                        <th>Time</th>
                                        <th>Duration</th>
                                    </tr>
                                </thead>
                                <tbody id="resultsTableBody" class="shadow  p-3 mb-5">
                                    <!-- Results will be populated here -->
                                </tbody>
                            </table>
                        </div>


                    </div>
                </div>
            </main>




            <footer class="text-center">
                <p>Developed by <strong>EKPOR JOHN NKANU.</strong> This app facilitates low-bandwidth, real-time virtual
                    classroom sessions. © 2024.</p>
            </footer>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script>
        async function logout() {
            try {
                const response = await fetch('/api/logout', { method: 'POST' });
                const data = await response.json();
                if (data.success) {
                    window.location.href = '/lecturer/login';
                } else {
                    console.error('Logout failed:', data.message);
                }
            } catch (error) {
                console.error('Error during logout:', error);
            }
        }

        function startVirtualClass() {
            window.location.href = '/lecturer/virtual-class'; // Adjust as per your route
        }
        document.getElementById('startVirtualClassLink').addEventListener('click', function (e) {
            e.preventDefault();
            showSection('startVirtualClassSection');
        });
        document.getElementById('courseListLink').addEventListener('click', function (e) {
            e.preventDefault();
            showSection('courseListSection');
            loadCourses();
        });
        document.getElementById('uploadsLink').addEventListener('click', function (e) {
            e.preventDefault();
            showSection('uploadsSection');
            loadUploads();
        });
        document.getElementById('cbtLink').addEventListener('click', function (e) {
            e.preventDefault();
            showSection('CbtSection');
            //loadUploads();
        });
        document.getElementById('attendanceLink').addEventListener('click',(e)=>{
            e.preventDefault();
            showSection('attendanceSection');
        })
        // Add this to your existing event listeners
        document.getElementById('viewAssignmentsLink').addEventListener('click', function (e) {
            e.preventDefault();
            showSection('viewAssignmentsSection');
            loadStudentAssignments();
        });
        function showSection(sectionId) {
            // Get all sections
            const sections = document.querySelectorAll('main > div');

            // Hide all sections
            sections.forEach(section => section.classList.add('d-none'));

            // Show the selected section
            const selectedSection = document.getElementById(sectionId);
            selectedSection.classList.remove('d-none');
        }

        function loadCourses() {
            axios.get('/api/courses')
                .then(function (response) {
                    const courseListBody = document.getElementById('courseListBody');
                    const courseSelect = document.getElementById('courseSelect');
                    const department = document.getElementById('departmentSelect')
                    courseSelect.innerHTML = '';
                    department.innerHTML = '';
                    courseListBody.innerHTML = '';
                    response.data.courses.forEach(course => {
                        const row = `
                    <tr>
                        <td>${course.courses}</td>
                        <td>${course.courseCode}</td>
                        <td>${course.department}</td>
                        <td>${course.faculty}</td>
                        <td>${course.students.length}</td>
                        <td>
                            <button class="btn btn-sm btn-primary" onclick="viewStudents('${course._id}', '${course.courses}')">View</button>
                        </td>
                    </tr>
                `;
                        const courze = `
                 <option value=${course._id}>${course.courses}</option>`;
                        const departmentz = `
                 <option value=${course._id}>${course.department}</option>`;
                        courseSelect.innerHTML += courze;
                        department.innerHTML += departmentz;
                        courseListBody.innerHTML += row;
                    });
                })
                .catch(function (error) {
                    console.error('Error loading courses:', error);
                    alert('Failed to load courses. Please try again.');
                });
        }

        function viewStudents(courseId, courseName) {
            document.getElementById('courseName').textContent = courseName;
            axios.get(`/api/courses/${courseId}/students`)
                .then(function (response) {
                    const studentModalBody = document.getElementById('studentModalBody');
                    studentModalBody.innerHTML = '';
                    response.data.students.forEach(student => {
                        const row = `
                    <tr>
                        <td>${student.name}</td>
                        <td>${student.matricNumber}</td>
                        <td>${student.department}</td>
                    </tr>
                `;
                        studentModalBody.innerHTML += row;
                    });
                    new bootstrap.Modal(document.getElementById('studentModal')).show();
                })
                .catch(function (error) {
                    console.error('Error loading students:', error);
                    alert('Failed to load students. Please try again.');
                });
        }


        function loadUploads() {
            axios.get('/api/uploadVideosorAudio')
                .then(function (response) {
                    const uploadsListBody = document.getElementById('uploadsListBody');
                    uploadsListBody.innerHTML = '';
                    response.data.uploads.forEach(upload => {
                        const row = `
                    <tr>
                        <td>${upload.fileName}</td>
                        <td>${new Date(upload.uploadDate).toLocaleString()}</td>
                        <td>${formatFileSize(upload.size)}</td>
                        <td>${upload.contentType}</td>
                        <td>
                            <a href="${upload.downloadURL}" class="btn btn-sm btn-primary" target="_blank">Download</a>
                        </td>
                        <td><button class="btn btn-danger btn-sm" onclick="deleteUpload('${upload._id}')">Delete</button></td>
                    </tr>
                `;
                        uploadsListBody.innerHTML += row;
                    });
                })
                .catch(function (error) {
                    console.error('Error loading uploads:', error);
                    alert('Failed to load uploads. Please try again.');
                });
        }

        function openFileUpload() {
            document.getElementById('fileUpload').click();
        }

        function uploadFile() {
            const fileInput = document.getElementById('fileUpload');
            const file = fileInput.files[0];
            const courseSelect = document.getElementById('courseSelect');
            const departmentSelect = document.getElementById('departmentSelect');
            if (!file || !courseSelect.value || !departmentSelect.value) {
                alert('Please select a file, course, and department before uploading.');
                return;
            }

            const formData = new FormData();
            formData.append('filename', file);
            formData.append('courseId', courseSelect.value);
            formData.append('departmentId', departmentSelect.value);

            axios.post('/api/uploadVideosorAudio', formData, {
                headers: {
                    'Content-Type': 'multipart/form-data'
                }
            })
                .then(function (response) {
                    alert('File uploaded successfully');
                    loadUploads();
                })
                .catch(function (error) {
                    console.error('Error uploading file:', error);
                    alert('Failed to upload file. Please try again.');
                });

        }
        // Add these functions to your existing JavaScript
        function loadStudentAssignments() {
            axios.get('/api/lecturerGetSubmittedDoc')
                .then(function (response) {
                    const assignmentListBody = document.getElementById('assignmentListBody');
                    assignmentListBody.innerHTML = '';
                    response.data.submissions.forEach(submission => {
                        const row = `
                    <tr>
                        <td>${submission.studentName}</td>
                        <td>${submission.fileName}</td>
                        <td>${submission.courseName}</td>
                        <td>${new Date(submission.uploadDate).toLocaleString()}</td>
                        <td>${formatFileSize(submission.size)}</td>
                        <td>
                            <a href="${submission.downloadURL}" class="btn btn-sm btn-primary" target="_blank">View</a>
                        </td>
                    </tr>
                `;
                        assignmentListBody.innerHTML += row;
                    });
                })
                .catch(function (error) {
                    console.error('Error loading student assignments:', error);
                    alert('Failed to load student assignments. Please try again.');
                });
        }
        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }
        async function deleteUpload(uploadId) {
            if (!confirm('Are you sure you want to delete this upload?')) {
                return;
            }
            try {
                const response = await axios.delete(`/api/uploadVideosorAudio/${uploadId}`);
                if (response.data.message) {
                    loadUploads();
                    alert('Upload deleted successfully.');
                } else {
                    alert('Failed to delete upload: ' + response.data.message);
                }
            } catch (error) {
                console.error('Error deleting upload:', error);
                alert('Failed to delete upload.');
            }
        }
        // Initial load
        showSection('courseListSection');
        loadCourses();


        document.addEventListener('DOMContentLoaded', function () {
            const form = document.getElementById('cbtExamForm');
            const addQuestionBtn = document.getElementById('addQuestionBtn');
            const questionsContainer = document.getElementById('questionsContainer');
            const courseSelect = document.getElementById('course');
            const departmentSelect = document.getElementById('department');
            const createExamForm = document.getElementById('createExamForm');
            const viewResultsTab = document.getElementById('view-results-tab');
            const resultsTableBody = document.getElementById('resultsTableBody');
  const attendanceContainer = document.getElementById('attendanceContainer');
            let questionCount = 0;

            // Fetch courses and departments
            // fetchCoursesAndDepartments();

            addQuestionBtn.addEventListener('click', addQuestion);
            form.addEventListener('submit', submitForm);

            function addQuestion() {
                questionCount++;
                const questionDiv = document.createElement('div');
                questionDiv.className = 'mb-3 shadow p-3 col-6';
                questionDiv.innerHTML = `
            <h4>Question ${questionCount}</h4>
            <div class="mb-3 ">
                <label class="form-label">Question</label>
                <textarea class="form-control question-text" required></textarea>
            </div>
            <div class="options-container mb-3">
                <label class="form-label">Options</label>
            </div>
            <button type="button" class="btn btn-secondary add-option-btn">Add Option</button>
            <div class="mb-3">
                <label class="form-label">Answer</label>
                <input type="text" class="form-control answer-text" required>
            </div>
        `;
                questionsContainer.appendChild(questionDiv);

                const addOptionBtn = questionDiv.querySelector('.add-option-btn');
                addOptionBtn.addEventListener('click', () => addOption(questionDiv));

                addOption(questionDiv);
                addOption(questionDiv);
            }

            function addOption(questionDiv) {
                const optionsContainer = questionDiv.querySelector('.options-container');
                const optionInput = document.createElement('input');
                optionInput.type = 'text';
                optionInput.className = 'form-control mt-2 option-text';
                optionInput.required = true;
                optionsContainer.appendChild(optionInput);
            }

            async function submitForm(e) {
                e.preventDefault();

                const questions = [];
                const questionDivs = questionsContainer.querySelectorAll('.mb-3.shadow.p-3.col-6');

                questionDivs.forEach(div => {
                    const questionText = div.querySelector('.question-text').value;
                    const options = Array.from(div.querySelectorAll('.option-text')).map(opt => opt.value);
                    const answer = div.querySelector('.answer-text').value;

                    questions.push({
                        question: questionText,
                        options: options,
                        answer: answer
                    });
                });
                let lecturerFullName = document.getElementById('adminName').textContent;
                // Trim whitespace and remove extra spaces
                lecturerFullName = lecturerFullName.trim().replace(/\s+/g, ' ');
                const examData = {
                    lecturer: lecturerFullName, // Replace with actual lecturer ID
                    startTime: document.getElementById('startTime').value,
                    examDuration: document.getElementById('examDuration').value,
                    course: courseSelect.value,
                    department: departmentSelect.value,
                    questions: questions
                };
                console.log(examData)
                try {
                    const response = await axios.post('/api/cbtexam/create', examData);
                    alert('CBT exam created successfully!');
                    form.reset();
                    questionsContainer.innerHTML = '';
                    questionCount = 0;
                } catch (error) {
                    console.error('Error creating CBT exam:', error);
                    alert('Error creating CBT exam. Please try again.');
                }
            }

            

            function populateSelect(selectElement, options) {
                options.forEach(option => {
                    const optionElement = document.createElement('option');
                    optionElement.value = option._id;
                    optionElement.textContent = option.name;
                    selectElement.appendChild(optionElement);
                });
            }
       
            viewResultsTab.addEventListener('click', fetchExamResults);

function fetchExamResults() {
    axios.get(`/api/lecturer/exam-results/`)
        .then(response => {
            displayExamResults(response.data);
        })
        .catch(error => {
            console.error('Error fetching exam results:', error);
            alert('Error fetching exam results. Please try again.');
        });
}

function displayExamResults(results) {
    resultsTableBody.innerHTML = '';
    results.forEach(result => {
        const row = document.createElement('tr');
        row.className='addPointer'
        row.innerHTML = `
            <td>${result.studentName}</td>
            <td>${result.department}</td>
            <td>${result.course}</td>
            <td>${result.score}</td>
            <td>${result.totalQuestions}</td>
            <td>${result.startTime}</td>
            <td>${result.examDuration}</td>
        `;
        resultsTableBody.appendChild(row);
    });
}


function createAttendanceCard(attendance) {
                const studentList = attendance.students.map(student => 
                    `<li>${student.name} (${student.matricNumber})</li>`
                ).join('');

                return `
                    <div class="col-md-4 mb-3">
                        <div class="card">
                            <div class="card-body">
                                <h5 class="card-title">${attendance.course}</h5>
                                <p class="card-text">Department: ${attendance.department}</p>
                                <p class="card-text">Start Time: ${attendance.startTime}</p>
                                <p class="card-text">Number of Attendees: ${attendance.numberOfAttendees}</p>
                                <h6>Attendees:</h6>
                                <ul class="student-list">
                                    ${studentList}
                                </ul>
                            </div>
                        </div>
                    </div>
                `;
            }

            function displayAttendance(attendanceData) {
                if (attendanceData.length === 0) {
                    attendanceContainer.innerHTML = '<div class="col-12"><div class="alert alert-info">No attendance registered.</div></div>';
                } else {
                    attendanceContainer.innerHTML = attendanceData.map(createAttendanceCard).join('');
                }
            }

            function fetchAttendance() {
                attendanceContainer.innerHTML = '<div class="col-12 text-center">Loading...</div>';

                fetch(`/api/lecturer-attendance/`)
                    .then(response => response.json())
                    .then(data => {
                        displayAttendance(data);
                    })
                    .catch(error => {
                        console.error('Error fetching attendance data:', error);
                        attendanceContainer.innerHTML = '<div class="col-12"><div class="alert alert-danger">Error fetching attendance data.</div></div>';
                    });
            }

            fetchAttendance();
        });
    </script>
</body>

</html>